---
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { ArrowRight } from 'lucide-react';

const salutations = [
  { value: 'dhr', label: 'Dhr' },
  { value: 'mevr', label: 'Mevr' },
  { value: 'mx', label: 'Mx' },
];
---

<div class="space-y-12">
  <div class="space-y-4">
    <h1 class="text-4xl font-bold tracking-tight">Heb Je Nog Vragen?</h1>
    <p class="text-lg text-muted-foreground max-w-2xl">
      Heb je nog vragen of heb je een idee voor een activiteit?<br />
      Vraag vrijblijvend advies
    </p>
  </div>

  <Card className="p-8 md:p-12 shadow-lg hover:shadow-xl transition-shadow duration-300">
    <div
      id="successMessage"
      class="hidden mb-6 rounded-xl bg-green-50 p-4 text-green-700 border border-green-200"
    >
      Bedankt voor je bericht! We nemen zo snel mogelijk contact met je op.
    </div>

    <form class="space-y-10" id="contactForm">
      {/* Salutation */}
      <div class="space-y-3">
        <label class="text-sm font-medium text-foreground/80">Aanspreking</label>
        <div class="flex flex-wrap gap-6">
          {
            salutations.map((item) => (
              <label class="relative flex items-center gap-3 group cursor-pointer">
                <input
                  type="radio"
                  name="salutation"
                  value={item.value}
                  class="peer sr-only"
                  required
                />
                <div class="w-5 h-5 border-2 rounded-full border-muted-foreground/30 peer-checked:border-red-500 peer-checked:bg-red-500 transition-all duration-200">
                  <div class="absolute inset-0 flex items-center justify-center">
                    <div class="w-2.5 h-2.5 rounded-full bg-white scale-0 peer-checked:scale-100 transition-transform duration-200" />
                  </div>
                </div>
                <span class="text-sm text-muted-foreground group-hover:text-foreground transition-colors duration-200">
                  {item.label}
                </span>
              </label>
            ))
          }
        </div>
      </div>

      {/* Name Fields */}
      <div class="grid sm:grid-cols-2 gap-8">
        <div class="space-y-3 group">
          <label
            for="firstName"
            class="text-sm font-medium text-foreground/80 group-focus-within:text-red-600 transition-colors duration-200"
          >
            Voornaam *
          </label>
          <div class="relative">
            <input
              type="text"
              id="firstName"
              name="firstName"
              required
              class="w-full px-4 py-3 rounded-xl border-2 bg-white/50 focus:bg-white focus:border-red-500 transition-all duration-300"
            />
          </div>
        </div>

        <div class="space-y-3 group">
          <label
            for="lastName"
            class="text-sm font-medium text-foreground/80 group-focus-within:text-red-600 transition-colors duration-200"
          >
            Achternaam *
          </label>
          <div class="relative">
            <input
              type="text"
              id="lastName"
              name="lastName"
              required
              class="w-full px-4 py-3 rounded-xl border-2 bg-white/50 focus:bg-white focus:border-red-500 transition-all duration-300"
            />
          </div>
        </div>
      </div>

      {/* Contact Fields */}
      <div class="grid sm:grid-cols-2 gap-8">
        <div class="space-y-3 group">
          <label
            for="email"
            class="text-sm font-medium text-foreground/80 group-focus-within:text-red-600 transition-colors duration-200"
          >
            Email *
          </label>
          <div class="relative">
            <input
              type="email"
              id="email"
              name="email"
              required
              class="w-full px-4 py-3 rounded-xl border-2 bg-white/50 focus:bg-white focus:border-red-500 transition-all duration-300"
            />
          </div>
        </div>

        <div class="space-y-3 group">
          <label
            for="phone"
            class="text-sm font-medium text-foreground/80 group-focus-within:text-red-600 transition-colors duration-200"
          >
            Telefoonnummer
          </label>
          <div class="relative">
            <input
              type="tel"
              id="phone"
              name="phone"
              class="w-full px-4 py-3 rounded-xl border-2 bg-white/50 focus:bg-white focus:border-red-500 transition-all duration-300"
            />
          </div>
        </div>
      </div>

      {/* Message */}
      <div class="space-y-3 group">
        <label
          for="message"
          class="text-sm font-medium text-foreground/80 group-focus-within:text-red-600 transition-colors duration-200"
        >
          Bijkomende Vragen
        </label>
        <div class="relative">
          <textarea
            id="message"
            name="message"
            rows="6"
            class="w-full px-4 py-3 rounded-xl border-2 bg-white/50 focus:bg-white focus:border-red-500 transition-all duration-300 resize-none"
          ></textarea>
        </div>
      </div>

      <Button
        type="submit"
        className="w-full bg-red-600 hover:bg-red-700 text-white group h-auto py-6 text-lg rounded-xl font-medium shadow-lg hover:shadow-xl transition-all duration-300"
      >
        <span class="flex items-center justify-center gap-2">
          Bericht Versturen
          <ArrowRight
            className="w-5 h-5 transition-transform duration-300 group-hover:translate-x-1"
          />
        </span>
      </Button>
    </form>
  </Card>
</div>

<script>
  const form = document.getElementById('contactForm') as HTMLFormElement;
  const successMessage = document.getElementById('successMessage');

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());

    try {
      const response = await fetch('/api/contact', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        throw new Error('Er is iets misgegaan');
      }

      console.log('Success! Showing message...');
      console.log('Success message element:', successMessage);

      form.reset();
      if (successMessage) {
        successMessage.classList.remove('hidden');
        setTimeout(() => {
          successMessage.classList.add('hidden');
        }, 5000);
      } else {
        console.error('Success message element not found!');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Er is iets misgegaan. Probeer het later opnieuw.');
    }
  });
</script>
