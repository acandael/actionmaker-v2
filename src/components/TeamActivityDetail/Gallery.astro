---
import { Image } from 'astro:assets';

interface Props {
  images: string[];
}

const { images } = Astro.props;

// Import all images from the activities directory
const imageImports = import.meta.glob('/src/assets/activities/**/*.{jpeg,jpg,png,gif}', {
  eager: true,
  import: 'default',
});
---

<div class="space-y-4">
  <h2 class="text-3xl font-bold">Galerij</h2>
  <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
    {
      images.map((image, index) => (
        <button
          type="button"
          class="relative aspect-[4/3] rounded-lg overflow-hidden group cursor-zoom-in"
          data-gallery-item
          data-index={index}
        >
          <Image
            src={imageImports[`/src/assets/activities/${image}`]}
            alt=""
            width={800}
            height={600}
            class="absolute inset-0 w-full h-full object-cover"
          />
          <div class="absolute inset-0 bg-black/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
        </button>
      ))
    }
  </div>
</div>

{/* Modal */}
<div
  id="gallery-modal"
  class="fixed inset-0 z-50 bg-black/90 opacity-0 pointer-events-none transition-opacity duration-300"
>
  <div class="relative w-full h-full flex items-center justify-center p-4">
    <button
      type="button"
      class="absolute top-4 right-4 text-white/70 hover:text-white transition-colors"
      id="close-modal"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke-width="1.5"
        stroke="currentColor"
        class="w-8 h-8"
      >
        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>

    <div class="w-full max-w-6xl">
      <div class="relative aspect-[16/9] rounded-lg overflow-hidden">
        <Image
          src={imageImports[`/src/assets/activities/${images[0]}`]}
          alt=""
          width={1920}
          height={1080}
          class="absolute inset-0 w-full h-full object-contain"
          id="modal-image"
        />
      </div>
    </div>
  </div>
</div>

<script>
  let currentImageIndex = 0;
  const galleryTriggers = document.querySelectorAll('[data-gallery-trigger]');
  const galleryItems = document.querySelectorAll('[data-gallery-item]');
  const modal = document.getElementById('galleryModal');
  const modalImage = document.getElementById('modalImage') as HTMLImageElement;
  const closeButton = document.getElementById('closeGallery');
  const prevButton = document.getElementById('prevImage');
  const nextButton = document.getElementById('nextImage');

  function openModal(index: number) {
    if (!modal || !modalImage) return;

    currentImageIndex = index;
    const image = galleryItems[index].querySelector('img');
    if (image) {
      modalImage.src = image.src;
      modal.style.display = 'flex';
      document.body.style.overflow = 'hidden';
    }
  }

  function closeModal() {
    if (!modal) return;

    modal.style.display = 'none';
    document.body.style.overflow = 'auto';
  }

  function showPrevImage() {
    if (!modalImage) return;

    currentImageIndex = (currentImageIndex - 1 + galleryItems.length) % galleryItems.length;
    const image = galleryItems[currentImageIndex].querySelector('img');
    if (image) {
      modalImage.src = image.src;
    }
  }

  function showNextImage() {
    if (!modalImage) return;

    currentImageIndex = (currentImageIndex + 1) % galleryItems.length;
    const image = galleryItems[currentImageIndex].querySelector('img');
    if (image) {
      modalImage.src = image.src;
    }
  }

  // Event Listeners
  galleryTriggers.forEach((trigger, index) => {
    trigger.addEventListener('click', () => openModal(index));
  });

  closeButton?.addEventListener('click', closeModal);
  prevButton?.addEventListener('click', showPrevImage);
  nextButton?.addEventListener('click', showNextImage);

  // Keyboard navigation
  document.addEventListener('keydown', (e) => {
    if (modal?.style.display === 'flex') {
      if (e.key === 'Escape') closeModal();
      if (e.key === 'ArrowLeft') showPrevImage();
      if (e.key === 'ArrowRight') showNextImage();
    }
  });

  // Close modal when clicking outside the image
  modal?.addEventListener('click', (e) => {
    if (e.target === modal) closeModal();
  });

  // Preload images for smoother transitions
  window.addEventListener('load', () => {
    galleryItems.forEach((item) => {
      const img = item.querySelector('img');
      if (img) {
        const preloadImage = new Image();
        preloadImage.src = img.src;
      }
    });
  });
</script>
