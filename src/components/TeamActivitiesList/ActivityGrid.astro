---
import { Card } from '@/components/ui/card';
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import { getLangFromUrl } from '@/i18n/utils';

interface Props {
  activities: {
    id: string;
    data: {
      title: string;
      description: string;
      image?: string;
      categories: string[];
      priority: number;
    };
  }[];
  imageImports: Record<string, { default: ImageMetadata }>;
}

const { activities, imageImports } = Astro.props;
const lang = getLangFromUrl(Astro.url);

// Create URL based on locale
const getActivityUrl = (id: string) => {
  const baseUrl = '/teambuildings';
  const cleanId = id.replace(/^(nl|fr|de)\//, '').replace(/\.md$/, '');
  return lang === 'nl' ? `${baseUrl}/${cleanId}` : `/${lang}${baseUrl}/${cleanId}`;
};

// Sort activities by priority before rendering
const sortedActivities = [...activities].sort((a, b) => {
  return (a.data.priority ?? 999) - (b.data.priority ?? 999);
});

// Debug received activities with detailed type information
console.log('\nActivities in grid component after sorting:');
sortedActivities.forEach((a) => {
  console.log(`${a.data.title}:`, {
    priority: a.data.priority,
    type: typeof a.data.priority,
  });
});
---

<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
  {
    sortedActivities.map((activity) => {
      const imagePath = `/src/assets/activities/${activity.data.image}`;
      const imageData = imageImports[imagePath]?.default;

      if (!imageData) {
        console.error(`Image not found: ${imagePath}`);
        return null;
      }

      const activityInfo = {
        id: activity.id,
        title: activity.data.title,
        priority: activity.data.priority,
        categories: activity.data.categories,
      };

      console.log(`Activity in grid: ${activity.data.title} (Priority: ${activity.data.priority})`);

      return (
        <a
          href={getActivityUrl(activity.id)}
          class="block"
          data-activity-info={JSON.stringify(activityInfo)}
        >
          <Card className="group overflow-hidden transition-all duration-300 hover:shadow-xl">
            <div class="relative h-72 overflow-hidden">
              <Image
                src={imageData}
                alt={activity.data.title}
                width={800}
                height={600}
                class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
              />
              <div class="absolute inset-0 bg-black/40 transition-opacity duration-300 group-hover:opacity-70" />
            </div>
            <div class="p-6">
              <h3 class="text-xl font-bold mb-2">{activity.data.title}</h3>
              <p class="text-sm text-muted-foreground line-clamp-2">{activity.data.description}</p>
            </div>
          </Card>
        </a>
      );
    })
  }
</div>

<style>
  [data-activity] {
    opacity: 0;
    transform: translateY(20px);
  }

  [data-activity].show {
    opacity: 1;
    transform: translateY(0);
    transition: all 0.8s cubic-bezier(0.16, 1, 0.3, 1);
  }
</style>

<script>
  function setupAnimations() {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('show');
            observer.unobserve(entry.target);
          }
        });
      },
      {
        threshold: 0.2,
        rootMargin: '50px',
      }
    );

    document.querySelectorAll('[data-activity]').forEach((activity) => {
      observer.observe(activity);
    });
  }

  // Log activity info with explicit priority values
  document.querySelectorAll('[data-activity-info]').forEach((el) => {
    const info = JSON.parse(el.getAttribute('data-activity-info') || '{}');
    const priority = Number(info.priority) || 999;
    console.log(`Activity in grid: ${info.title} (Priority: ${priority})`);
  });

  // Initialize on page load
  setupAnimations();

  // Handle view transitions
  document.addEventListener('astro:page-load', () => {
    setupAnimations();
    // Re-run logging after page transitions
    document.querySelectorAll('[data-activity-info]').forEach((el) => {
      const info = JSON.parse(el.getAttribute('data-activity-info') || '{}');
      const priority = Number(info.priority) || 999;
      console.log(`Activity in grid: ${info.title} (Priority: ${priority})`);
    });
  });
</script>
