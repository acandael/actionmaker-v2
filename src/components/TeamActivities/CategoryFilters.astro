---
import { getLangFromUrl, useTranslations } from '@/i18n/utils';

interface Props {
  categories: {
    id: string;
    data: {
      title: string;
      description: string;
    };
  }[];
  selectedCategory: string | null;
  fromHomepage?: boolean;
}

const { categories, selectedCategory, fromHomepage = false } = Astro.props;
const lang = getLangFromUrl(Astro.url);

// Get clean category ID without locale prefix
const getCleanCategoryId = (id: string) => {
  return id.replace(`${lang}/`, '');
};

// Create URL based on locale and category
const getCategoryUrl = (categoryId: string | null) => {
  const baseUrl = '/teambuildings';
  const queryParam = categoryId ? `?category=${categoryId}#activities-section` : '';

  // Don't include locale prefix for default locale (nl)
  return lang === 'nl' ? `${baseUrl}${queryParam}` : `/${lang}${baseUrl}${queryParam}`;
};
---

<div class="flex flex-wrap justify-center gap-4">
  <a
    href={getCategoryUrl(null)}
    class:list={[
      'px-4 py-2 rounded-full border transition-colors',
      !selectedCategory
        ? 'bg-red-600 text-white border-red-600'
        : 'border-gray-200 hover:border-red-600 hover:text-red-600',
    ]}
  >
    Alle activiteiten
  </a>
  {
    categories.map((category) => {
      const cleanId = getCleanCategoryId(category.id);

      return (
        <a
          href={getCategoryUrl(cleanId)}
          class:list={[
            'px-4 py-2 rounded-full border transition-colors',
            selectedCategory === cleanId
              ? 'bg-red-600 text-white border-red-600'
              : 'border-gray-200 hover:border-red-600 hover:text-red-600',
          ]}
        >
          {category.data.title}
        </a>
      );
    })
  }
</div>
