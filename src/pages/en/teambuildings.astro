---
import Layout from '@/layouts/Layout.astro';
import { getCollection } from 'astro:content';
import ActivityGrid from '@/components/TeamActivitiesList/ActivityGrid.astro';
import CategoryFilters from '@/components/TeamActivitiesList/CategoryFilters.astro';
import { Separator } from '@/components/ui/separator';
import type { ImageMetadata } from 'astro';
import { getLangFromUrl, useTranslations } from '@/i18n/utils';

// Get current locale
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Get all activities
const allActivities = await getCollection('activities');

// Filter activities by language
const activities = allActivities.filter((activity) => activity.id.startsWith(`${lang}/`));

// Get categories and filter by locale
const allCategories = await getCollection('categories');
const categories = allCategories
  .filter((category) => category.id.startsWith(`${lang}/`))
  .map((category) => ({
    id: category.id.replace(`${lang}/`, ''),
    data: {
      title: category.data.title,
      description: category.data.description,
    },
  }));

// Get the selected category from URL
const selectedCategory = Astro.url.searchParams.get('category');

// Get current category from original collection to access data
const currentCategory = selectedCategory
  ? allCategories.find((c) => c.id === `${lang}/${selectedCategory}`)
  : null;

// Import all images
const imageImports = import.meta.glob<{ default: ImageMetadata }>(
  '/src/assets/activities/**/*.{jpeg,jpg,png,gif}',
  {
    eager: true,
  }
);

// Filter activities based on selected category
let filteredActivities = selectedCategory
  ? activities.filter((activity) => {
      const isInCategory = activity.data.categories.includes(selectedCategory);
      console.log(`Filtering ${activity.data.title}:`, {
        categories: activity.data.categories,
        selectedCategory,
        priority: activity.data.priority,
        type: typeof activity.data.priority,
        isInCategory,
      });
      return isInCategory;
    })
  : activities;

// Sort by priority
filteredActivities.sort((a, b) => {
  // Ensure we're working with numbers and preserve priority 1
  const priorityA = typeof a.data.priority === 'number' ? a.data.priority : 999;
  const priorityB = typeof b.data.priority === 'number' ? b.data.priority : 999;

  console.log(`Sorting comparison:`, {
    titleA: a.data.title,
    priorityA,
    titleB: b.data.title,
    priorityB,
  });

  return priorityA - priorityB;
});

// Format activities for the grid
const formattedActivities = filteredActivities
  .filter((activity) => Boolean(activity.data.image))
  .map((activity) => ({
    id: activity.id.replace(`${lang}/`, ''),
    data: {
      ...activity.data,
      // Preserve the original priority value
      priority: activity.data.priority,
    },
  }));

// Format the count message
const getCountMessage = (count: number, isFiltered: boolean) => {
  const key = isFiltered
    ? `teambuildings.activities-found_${count === 1 ? 'one' : 'other'}`
    : `teambuildings.activities-available_${count === 1 ? 'one' : 'other'}`;

  const message = t(key as any).replace('{{count}}', count.toString());

  return isFiltered ? `${message} ${currentCategory?.data.title.toLowerCase() || ''}` : message;
};
---

<Layout
  title="Team Building Activities | ActionMaker"
  description="Discover our unique team building activities and create unforgettable experiences for your team."
>
  <section class="max-w-7xl mx-auto px-4 py-24 mt-16">
    <div class="text-center mb-16">
      <h1 class="text-balance text-4xl md:text-6xl font-bold mb-4">
        {currentCategory ? currentCategory.data.title : t('teambuildings.title')}
      </h1>
      {
        currentCategory && (
          <p class="text-xl text-muted-foreground">{currentCategory.data.description}</p>
        )
      }
    </div>

    <CategoryFilters categories={categories} selectedCategory={selectedCategory} />

    <div class="mb-16">
      <Separator className="max-w-2xl mx-auto" />
    </div>

    <div class="text-center mb-8">
      <p class="text-muted-foreground">
        {getCountMessage(formattedActivities.length, !!selectedCategory)}
      </p>
    </div>

    <ActivityGrid activities={formattedActivities} imageImports={imageImports} />
  </section>
</Layout>
