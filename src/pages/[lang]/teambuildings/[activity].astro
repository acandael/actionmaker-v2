import type { GetStaticPaths } from 'astro';
import type { CollectionEntry } from 'astro:content';
import Layout from '@/layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ArrowRight, Users, Clock, Euro, Calendar, CheckCircle2 } from 'lucide-react';
import { BookingForm } from './BookingForm.tsx';
import Gallery from '@/components/TeamActivityDetail/Gallery.astro';
import VideoPlayer from '@/components/TeamActivityDetail/VideoPlayer.astro';
import VideoStructuredData from '@/components/TeamActivityDetail/VideoStructuredData.astro';
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import { getLangFromUrl, useTranslations } from '@/i18n/utils';

// Get current locale
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Get the activity slug from the URL
const { activity: activitySlug } = Astro.params;

// Get all activities
const activities = await getCollection('activities');

// Find the activity that matches the current locale and slug
const activity = activities.find((activity) => activity.id === `${lang}/${activitySlug}.md`);

if (!activity) {
  return Astro.redirect('/404');
}

// Get the rendered content
const { Content } = await activity.render();

// Format today's date as ISO 8601 for uploadDate
const today = new Date().toISOString().split('T')[0];

// Import all images
const imageImports = import.meta.glob<{ default: ImageMetadata }>(
  '/src/assets/activities/**/*.{jpeg,jpg,png,gif,webp}',
  {
    eager: true,
  }
);

// Get the hero image
const imagePath = `/src/assets/activities/${activity.data.image}`;
const heroImage = imageImports[imagePath]?.default;

if (!heroImage) {
  console.error(`Image not found: ${imagePath}`);
  return Astro.redirect('/404');
}

// Get the images for the gallery
const images = activity.data.gallery || [];

// Get the first image as thumbnail for video structured data
const firstGalleryImage = images[0] ? imageImports[`/src/assets/activities/${images[0]}`]?.default : null;
const thumbnailUrl = firstGalleryImage ? Astro.url.origin + firstGalleryImage.src : undefined;

// Type the activity data
type Activity = CollectionEntry<'activities'>;

<Layout title={`${activity.data.title} - Action Maker`} description={activity.data.description}>
  {/* Add VideoStructuredData if video exists */}
  {activity.data['video-url'] && (
    <VideoStructuredData
      videoUrl={activity.data['video-url']}
      title={activity.data.title}
      description={activity.data.description}
      uploadDate={today}
      thumbnailUrl={thumbnailUrl}
    />
  )}

  {/* Hero Section */}
  <section class="relative min-h-[60vh] flex items-center -mt-20">
    <div class="absolute inset-0 z-0">
      <Image
        src={heroImage}
        alt={activity.data.title}
        width={1920}
        height={1080}
        class="w-full h-full object-cover"
        quality="high"
      />
      <div class="absolute inset-0 bg-gradient-to-r from-black/70 via-black/60 to-transparent" />
    </div>

    <div class="relative z-10 max-w-7xl mx-auto px-4 py-24 mt-16">
      <h1 class="text-4xl md:text-6xl font-bold text-white mb-6">
        {activity.data.title}
      </h1>
      <p class="text-xl text-white/90 max-w-2xl">{activity.data.description}</p>
    </div>
  </section>

  <section class="max-w-7xl mx-auto px-4 py-12">
    <div class="grid lg:grid-cols-3 gap-12">
      {/* Main Content */}
      <div class="lg:col-span-2">
        <div class="prose prose-lg max-w-none mb-12">
          <Content />

          {activity.data.features && (
            <div class="mt-8 not-prose">
              <h3 class="text-xl font-semibold mb-4">{t('activity.features-title')}</h3>
              <ul class="space-y-3">
                {activity.data.features.map((feature) => (
                  <li class="flex items-center gap-3">
                    <CheckCircle2 className="h-5 w-5 text-green-500 shrink-0" />
                    <span>{feature}</span>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>

        {activity.data['video-url'] && (
          <div class="mb-12">
            <h2 class="text-3xl font-bold mb-8">{t('activity.video-title')}</h2>
            <VideoPlayer videoUrl={activity.data['video-url']} />
          </div>
        )}

        {images.length > 0 && (
          <div class="mb-12">
            <Gallery images={images} imageImports={imageImports} />
          </div>
        )}

        {/* Booking Form */}
        <div id="booking-form" class="pt-12 border-t">
          <h2 class="text-3xl font-bold mb-8">{t('activity.booking-title')}</h2>
          <BookingForm
            client:load
            activityTitle={activity.data.title}
            isGame={activity.data.isGame}
            isCityGame={activity.data.isCityGame}
          />
        </div>
      </div>

      {/* Sidebar */}
      <div class="lg:col-span-1">
        <Card className="p-6 sticky top-24">
          <div class="space-y-6">
            <div class="flex items-center gap-4">
              <Users className="h-5 w-5 text-muted-foreground" />
              <div>
                <p class="text-sm text-muted-foreground">{t('activity.group-size')}</p>
                <p class="font-medium">{activity.data.groupSize}</p>
              </div>
            </div>

            <div class="flex items-center gap-4">
              <Clock className="h-5 w-5 text-muted-foreground" />
              <div>
                <p class="text-sm text-muted-foreground">{t('activity.duration')}</p>
                <p class="font-medium">{activity.data.duration}</p>
              </div>
            </div>

            <div class="flex items-center gap-4">
              <Calendar className="h-5 w-5 text-muted-foreground" />
              <div>
                <p class="text-sm text-muted-foreground">{t('activity.availability')}</p>
                <p class="font-medium">{activity.data.availability}</p>
              </div>
            </div>

            <a class="block" href="#booking-form">
              <Button className="w-full bg-red-600 hover:bg-red-700 text-white group">
                {t('activity.request-quote')}
                <ArrowRight className="ml-2 h-4 w-4 transition-transform group-hover:translate-x-1" />
              </Button>
            </a>
          </div>
        </Card>
      </div>
    </div>
  </section>
</Layout>

