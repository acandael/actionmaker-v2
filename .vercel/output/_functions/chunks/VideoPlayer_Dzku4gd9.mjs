import { c as createAstro, a as createComponent, f as renderTemplate, g as defineScriptVars, e as renderComponent, b as addAttribute, m as maybeRenderHead } from './astro/server_BeOFNrkS.mjs';
import 'kleur/colors';
import { $ as $$Image } from './_astro_assets_BqFTDrm1.mjs';
import { g as getLangFromUrl, u as useTranslations } from './Footer_CXfFBHF-.mjs';
import 'clsx';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro$1 = createAstro("https://www.actionmaker.be");
const $$Gallery = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$1, $$props, $$slots);
  Astro2.self = $$Gallery;
  const { images, imageImports } = Astro2.props;
  const lang = getLangFromUrl(Astro2.url);
  const t = useTranslations(lang);
  return renderTemplate(_a || (_a = __template(["", '<div class="space-y-4"> <h2 class="text-3xl font-bold">', '</h2> <div class="grid grid-cols-2 md:grid-cols-3 gap-4"> ', ' </div> </div>  <div id="gallery-modal" class="fixed inset-0 z-50 bg-black/90 opacity-0 pointer-events-none transition-opacity duration-300"> <div class="relative w-full h-full flex items-center justify-center p-4">  <button type="button" class="absolute top-4 right-4 text-white/70 hover:text-white transition-colors z-70" id="close-modal"> <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8"> <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path> </svg> </button>  <button type="button" class="absolute left-2 md:left-4 top-1/2 -translate-y-1/2 text-white/70 hover:text-white transition-colors bg-black/50 p-2 rounded-full z-70" id="prev-button"> <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="currentColor" class="w-6 h-6 md:w-8 md:h-8"> <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5"></path> </svg> </button>  <button type="button" class="absolute right-2 md:right-4 top-1/2 -translate-y-1/2 text-white/70 hover:text-white transition-colors bg-black/50 p-2 rounded-full z-70" id="next-button"> <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="currentColor" class="w-6 h-6 md:w-8 md:h-8"> <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5"></path> </svg> </button> <div class="w-full max-w-6xl z-60"> <div class="relative aspect-auto max-h-[90vh] rounded-lg overflow-hidden"> ', ' </div> </div> </div> </div> <script type="module">', "\n  const galleryItems = document.querySelectorAll('[data-gallery-item]');\n  const modal = document.getElementById('gallery-modal');\n  const modalImage = document.getElementById('modal-image');\n  if (!(modalImage instanceof HTMLImageElement)) throw new Error('Modal image not found');\n  const closeButton = document.getElementById('close-modal');\n  const prevButton = document.getElementById('prev-button');\n  const nextButton = document.getElementById('next-button');\n\n  let currentIndex = 0;\n\n  function openModal(index) {\n    currentIndex = index;\n    const imagePath = `/src/assets/activities/${images[currentIndex]}`;\n    modalImage.src = imageImports[imagePath].default.src;\n    modal?.classList.remove('opacity-0', 'pointer-events-none');\n    modal?.classList.add('flex');\n    document.body.style.overflow = 'hidden';\n    addTouchListeners();\n  }\n\n  function closeModal() {\n    modal?.classList.add('opacity-0', 'pointer-events-none');\n    modal?.classList.remove('flex');\n    document.body.style.overflow = '';\n    removeTouchListeners();\n  }\n\n  function showPrevImage() {\n    currentIndex = (currentIndex - 1 + images.length) % images.length;\n    const imagePath = `/src/assets/activities/${images[currentIndex]}`;\n    modalImage.src = imageImports[imagePath].default.src;\n  }\n\n  function showNextImage() {\n    currentIndex = (currentIndex + 1) % images.length;\n    const imagePath = `/src/assets/activities/${images[currentIndex]}`;\n    modalImage.src = imageImports[imagePath].default.src;\n  }\n\n  // Touch handling\n  let touchStartX = 0;\n  let touchEndX = 0;\n\n  function handleTouchStart(e) {\n    touchStartX = e.changedTouches[0].screenX;\n  }\n\n  function handleTouchEnd(e) {\n    touchEndX = e.changedTouches[0].screenX;\n    handleSwipe();\n  }\n\n  function handleSwipe() {\n    const swipeThreshold = 50;\n    const swipeLength = touchEndX - touchStartX;\n    if (Math.abs(swipeLength) > swipeThreshold) {\n      if (swipeLength > 0) {\n        showPrevImage();\n      } else {\n        showNextImage();\n      }\n    }\n  }\n\n  function addTouchListeners() {\n    modal?.addEventListener('touchstart', handleTouchStart);\n    modal?.addEventListener('touchend', handleTouchEnd);\n  }\n\n  function removeTouchListeners() {\n    modal?.removeEventListener('touchstart', handleTouchStart);\n    modal?.removeEventListener('touchend', handleTouchEnd);\n  }\n\n  // Event Listeners\n  galleryItems.forEach((item, index) => {\n    item.addEventListener('click', () => openModal(index));\n  });\n\n  closeButton?.addEventListener('click', closeModal);\n  prevButton?.addEventListener('click', showPrevImage);\n  nextButton?.addEventListener('click', showNextImage);\n\n  // Keyboard navigation\n  document.addEventListener('keydown', (e) => {\n    if (!modal?.classList.contains('opacity-0')) {\n      if (e.key === 'Escape') closeModal();\n      if (e.key === 'ArrowLeft') showPrevImage();\n      if (e.key === 'ArrowRight') showNextImage();\n    }\n  });\n\n  // Close modal when clicking outside\n  modal?.addEventListener('click', (e) => {\n    if (e.target === modal) closeModal();\n  });\n<\/script>"], ["", '<div class="space-y-4"> <h2 class="text-3xl font-bold">', '</h2> <div class="grid grid-cols-2 md:grid-cols-3 gap-4"> ', ' </div> </div>  <div id="gallery-modal" class="fixed inset-0 z-50 bg-black/90 opacity-0 pointer-events-none transition-opacity duration-300"> <div class="relative w-full h-full flex items-center justify-center p-4">  <button type="button" class="absolute top-4 right-4 text-white/70 hover:text-white transition-colors z-70" id="close-modal"> <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8"> <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path> </svg> </button>  <button type="button" class="absolute left-2 md:left-4 top-1/2 -translate-y-1/2 text-white/70 hover:text-white transition-colors bg-black/50 p-2 rounded-full z-70" id="prev-button"> <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="currentColor" class="w-6 h-6 md:w-8 md:h-8"> <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5"></path> </svg> </button>  <button type="button" class="absolute right-2 md:right-4 top-1/2 -translate-y-1/2 text-white/70 hover:text-white transition-colors bg-black/50 p-2 rounded-full z-70" id="next-button"> <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="currentColor" class="w-6 h-6 md:w-8 md:h-8"> <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5"></path> </svg> </button> <div class="w-full max-w-6xl z-60"> <div class="relative aspect-auto max-h-[90vh] rounded-lg overflow-hidden"> ', ' </div> </div> </div> </div> <script type="module">', "\n  const galleryItems = document.querySelectorAll('[data-gallery-item]');\n  const modal = document.getElementById('gallery-modal');\n  const modalImage = document.getElementById('modal-image');\n  if (!(modalImage instanceof HTMLImageElement)) throw new Error('Modal image not found');\n  const closeButton = document.getElementById('close-modal');\n  const prevButton = document.getElementById('prev-button');\n  const nextButton = document.getElementById('next-button');\n\n  let currentIndex = 0;\n\n  function openModal(index) {\n    currentIndex = index;\n    const imagePath = \\`/src/assets/activities/\\${images[currentIndex]}\\`;\n    modalImage.src = imageImports[imagePath].default.src;\n    modal?.classList.remove('opacity-0', 'pointer-events-none');\n    modal?.classList.add('flex');\n    document.body.style.overflow = 'hidden';\n    addTouchListeners();\n  }\n\n  function closeModal() {\n    modal?.classList.add('opacity-0', 'pointer-events-none');\n    modal?.classList.remove('flex');\n    document.body.style.overflow = '';\n    removeTouchListeners();\n  }\n\n  function showPrevImage() {\n    currentIndex = (currentIndex - 1 + images.length) % images.length;\n    const imagePath = \\`/src/assets/activities/\\${images[currentIndex]}\\`;\n    modalImage.src = imageImports[imagePath].default.src;\n  }\n\n  function showNextImage() {\n    currentIndex = (currentIndex + 1) % images.length;\n    const imagePath = \\`/src/assets/activities/\\${images[currentIndex]}\\`;\n    modalImage.src = imageImports[imagePath].default.src;\n  }\n\n  // Touch handling\n  let touchStartX = 0;\n  let touchEndX = 0;\n\n  function handleTouchStart(e) {\n    touchStartX = e.changedTouches[0].screenX;\n  }\n\n  function handleTouchEnd(e) {\n    touchEndX = e.changedTouches[0].screenX;\n    handleSwipe();\n  }\n\n  function handleSwipe() {\n    const swipeThreshold = 50;\n    const swipeLength = touchEndX - touchStartX;\n    if (Math.abs(swipeLength) > swipeThreshold) {\n      if (swipeLength > 0) {\n        showPrevImage();\n      } else {\n        showNextImage();\n      }\n    }\n  }\n\n  function addTouchListeners() {\n    modal?.addEventListener('touchstart', handleTouchStart);\n    modal?.addEventListener('touchend', handleTouchEnd);\n  }\n\n  function removeTouchListeners() {\n    modal?.removeEventListener('touchstart', handleTouchStart);\n    modal?.removeEventListener('touchend', handleTouchEnd);\n  }\n\n  // Event Listeners\n  galleryItems.forEach((item, index) => {\n    item.addEventListener('click', () => openModal(index));\n  });\n\n  closeButton?.addEventListener('click', closeModal);\n  prevButton?.addEventListener('click', showPrevImage);\n  nextButton?.addEventListener('click', showNextImage);\n\n  // Keyboard navigation\n  document.addEventListener('keydown', (e) => {\n    if (!modal?.classList.contains('opacity-0')) {\n      if (e.key === 'Escape') closeModal();\n      if (e.key === 'ArrowLeft') showPrevImage();\n      if (e.key === 'ArrowRight') showNextImage();\n    }\n  });\n\n  // Close modal when clicking outside\n  modal?.addEventListener('click', (e) => {\n    if (e.target === modal) closeModal();\n  });\n<\/script>"])), maybeRenderHead(), t("activity.gallery-title"), images.map((image, index) => {
    const imagePath = `/src/assets/activities/${image}`;
    const imageData = imageImports[imagePath]?.default;
    if (!imageData) {
      console.error(`Image not found: ${imagePath}`);
      return null;
    }
    return renderTemplate`<button type="button" class="relative aspect-4/3 rounded-lg overflow-hidden group cursor-zoom-in" data-gallery-item${addAttribute(index, "data-index")}> ${renderComponent($$result, "Image", $$Image, { "src": imageData, "alt": "", "width": 800, "height": 600, "class": "absolute inset-0 w-full h-full object-cover" })} <div class="absolute inset-0 bg-black/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div> </button>`;
  }), renderComponent($$result, "Image", $$Image, { "src": imageImports[`/src/assets/activities/${images[0]}`].default, "alt": "", "width": 1920, "height": 1080, "class": "w-full h-full object-contain", "id": "modal-image" }), defineScriptVars({ images, imageImports }));
}, "/Users/anthonycandaele/Projects/ActionMaker/website/src/components/TeamActivityDetail/Gallery.astro", void 0);

const $$Astro = createAstro("https://www.actionmaker.be");
const $$VideoPlayer = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$VideoPlayer;
  const { videoUrl } = Astro2.props;
  return renderTemplate`${maybeRenderHead()}<div class="mb-12"> <div class="relative w-full" style="padding-top: 56.25%;"> <iframe${addAttribute(`${videoUrl}?autoplay=false&preload=true`, "src")} loading="lazy" style="border: none; position: absolute; top: 0; height: 100%; width: 100%;" allow="accelerometer; gyroscope; autoplay; encrypted-media; picture-in-picture;" allowfullscreen="true">
    </iframe> </div> </div>`;
}, "/Users/anthonycandaele/Projects/ActionMaker/website/src/components/TeamActivityDetail/VideoPlayer.astro", void 0);

export { $$VideoPlayer as $, $$Gallery as a };
